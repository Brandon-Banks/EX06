#ifndef COMPLEX_H
#define COMPLEX_H
#include <cmath>
#include <string>

class Complex
{
private:
	int a;
	int b;
	int num;
	string u;

public:
	Complex()
	{
		c = 0;
		d = 0;
	}
	Complex(int c, int d)
	{
		c = a;
		d = b;
		num = a + b;

	}
	Complex(int c)
	{
		b = 0;
		c = a;
		num = a;

	}

	int getRealPart()
	{
		return a;
	}
  
	int getImaginaryPart()
	{
		return b;
	}
};

int operator add(const Complex toaster, const Complex eggsalad)
{
	cout << "(" << toaster.getRealPart << "+" << toaster.getImaginaryPart << "i) + (";
	cout << eggsalad.getRealPart << "+" << eggsalad.getImaginaryPart << "i) = ";
}

int operator subtract(const Complex toaster, const Complex eggsalad)
{
	cout << "(" << toaster.getRealPart << "+" << toaster.getImaginaryPart << "i) - (";
	cout << "(" << eggsalad.getRealPart << "+" << eggsalad.getImaginaryPart << "i) = ";
}

int operator multiply(const Complex toaster, const Complex eggsalad)
{
	cout << "(" << toaster.getRealPart << "+" << toaster.getImaginaryPart << "i) * (";
	cout << "(" << eggsalad.getRealPart << "+" << eggsalad.getImaginaryPart << "i) = ";
}

int operator divide(const Complex toaster, const Complex eggsalad)
{
	cout << "(" << toaster.getRealPart << "+" << toaster.getImaginaryPart << "i) / (";
	cout << "(" << eggsalad.getRealPart << "+" << eggsalad.getImaginaryPart << "i) = (";
}

#endif
